package superviseur;

// Import des classes JMS nÃ©cessaires
import jakarta.jms.*;
import org.apache.activemq.ActiveMQConnectionFactory;

public class Superviseur {
    public static void main(String[] args) throws Exception {

        // 1. CrÃ©ation de la fabrique de connexions JMS pour se connecter au broker ActiveMQ
        ConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");

        // 2. CrÃ©ation de la connexion au broker
        Connection connection = factory.createConnection();

        // 3. DÃ©finition dâ€™un ID client â€” nÃ©cessaire **uniquement** si on souhaite un abonnement durable
        connection.setClientID("superviseur-1"); // Utile si on veut activer les durable subscribers

        // 4. DÃ©marrage explicite de la connexion (obligatoire cÃ´tÃ© consommateur)
        connection.start();

        // 5. CrÃ©ation dâ€™une session non transactionnelle avec acquittement automatique
        Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);

        // 6. AccÃ¨s (ou crÃ©ation) au topic nommÃ© "ALERTES_STOCK"
        Topic topic = session.createTopic("ALERTES_STOCK");

        // 7. CrÃ©ation dâ€™un consommateur de messages sur le topic
        // ðŸ‘‰ Ici c'est un **abonnement simple**, pas un abonnement durable (mÃªme si clientID est dÃ©fini)
        MessageConsumer consumer = session.createConsumer(topic);

        // 8. DÃ©finition du comportement asynchrone : exÃ©cution automatique lorsquâ€™un message est reÃ§u
        consumer.setMessageListener(message -> {
            try {
                // 8.1 On suppose que le message reÃ§u est de type texte (TextMessage)
                TextMessage textMessage = (TextMessage) message;

                // 8.2 Affichage du contenu de l'alerte sur la console
                System.out.println("ðŸ”” Alerte reÃ§ue : " + textMessage.getText());
            } catch (Exception e) {
                // En cas dâ€™erreur, on affiche la trace
                e.printStackTrace();
            }
        });

        // 9. Message d'information pour l'utilisateur
        System.out.println("Superviseur en Ã©coute des alertes...");

        // 10. Le superviseur reste actif 30 secondes avant de se fermer
        Thread.sleep(30000);

        // 11. Fermeture de la connexion proprement
        connection.close();
    }
}
